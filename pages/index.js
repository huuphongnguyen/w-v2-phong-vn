import { useState } from "react";
import NextLink from "next/link";
import ArchillectImageGrid from "../components/ArchillectImageGrid";
import Container from "../components/Container";
import InternalLink from "../components/elements/InternalLink";
import PhongSignature from "../components/elements/PhongSignature";
import ExternalLink from "../components/elements/ExternalLink";
import {
  Chip,
  CubeTransparent,
  QRCode,
  Mail,
  MailOpen,
  ChevronUp,
  UserCircle,
  Cube,
  DocumentText,
  Document,
} from "../components/icons/HeroIcons";
import { ChevronDown } from "../components/icons/CustomIcons";
import toast, { Toaster } from "react-hot-toast";
import HashflagsGrid from "../components/HashflagsGrid";
import { Archillect, Twitter } from "../components/icons/LogoIcons";

const defaultEndpoint = process.env.ARCHILLECT_AI_UNOFFICIAL_API;

const FullLetter = () => (
  <>
    <div className="text-black dark:text-white my-10 space-y-3 text-sm">
      <p>
        Xin ch√†o, m√¨nh l√† <InternalLink href="/phong">Phong</InternalLink>, l√†
        ng∆∞·ªùi x√¢y d·ª±ng, ph√°t tri·ªÉn, v√† thi·∫øt k·∫ø cho{" "}
        <strong>PHONG FOUNDATION</strong>. ƒê√¢y l√† ƒë∆∞·ª£c m√¨nh xem nh∆∞ l√† m·ªôt trung
        t√¢m ph√°t tri·ªÉn v√† x√¢y d·ª±ng nh·ªØng g√¨ m√¨nh l√†m trong xuy√™n su·ªët qu√° tr√¨nh
        m·ªü r·ªông kh·∫£ nƒÉng c·ªßa m√¨nh.
      </p>
      <p>
        M√¨nh l√† m·ªôt ng∆∞·ªùi s·ªëng h∆∞·ªõng n·ªôi v√† kh√¥ng th·∫≠t s·ª± qu√° t·ªët trong vi·ªác th·ªÉ
        hi·ªán v√† b·ªôc l·ªô b·∫£n th√¢n ƒë·ªÉ giao ti·∫øp v·ªõi nh·ªØng ng∆∞·ªùi xung quanh. Ch√≠nh
        v√¨ l√Ω do ƒë√≥, m√¨nh mu·ªën x√¢y d·ª±ng m·ªôt ƒëi·ªÅu g√¨ ƒë√≥ xung quanh cu·ªôc s·ªëng c·ªßa
        m√¨nh, t·ª´ ƒë√≥ nh∆∞ m·ªôt s·ª£i d√¢y k·∫øt n·ªëi v·ªõi m·ªçi ng∆∞·ªùi.
      </p>
      <p>
        B·∫£n th√¢n m·ªói ng∆∞·ªùi ch√∫ng ta sinh ra ƒë√£ l√† m·ªôt ƒëi·ªÅu r·∫•t r·∫•t may m·∫Øn m√†
        th∆∞·ª£ng ƒë·∫ø ƒë√£ ban t·∫∑ng. M√¨nh nghƒ© b·∫•t k·ª≥ ai, b·∫•t k·ª≥ c√° nh√¢n n√†o c≈©ng c√≥
        quy·ªÅn x√¢y d·ª±ng cho b·∫£n th√¢n m·ªôt kh√°i ni·ªám, m·ªôt l√Ω t∆∞·ªüng, m·ªôt ƒëi·ªÅu g√¨ ƒë√≥
        m√† n√≥ th·ªÉ hi·ªán ch√≠nh x√°c con ng∆∞·ªùi h·ªç. NƒÉm nay m√¨nh 22+1, b·∫£n th√¢n m√¨nh
        ƒëang tr·∫£i qua m·ªôt giai ƒëo·∫°n c√≥ th·ªÉ coi l√† m·ªôt v√≤ng l·∫©n qu·∫©n c·ªßa cu·ªôc
        ƒë·ªùi. T·ª©c l√† ch√∫ng ta (√≠t nh·∫•t nh·ªØng ng∆∞·ªùi trong c√πng ƒë·ªô tu·ªïi n√†y m√† m√¨nh
        bi·∫øt) c·ªë g·∫Øng tho√°t kh·ªèi v√πng an to√†n, c·ªë g·∫Øng lo·∫°i b·ªè ƒëi s·ª± tr√¨ ho√£n,
        hay √≠t nh·∫•t l√† c·ªë g·∫Øng v∆∞·ª£t ra kh·ªèi ranh gi·ªõi m√† b·∫£n th√¢n ƒë√£ ·ªü qu√° l√¢u.
        ƒê√≥ th·∫≠t s·ª± l√† m·ªôt giai ƒëo·∫°n kh√≥ khƒÉn v√† nhi·ªÅu th·ª≠ th√°ch, nh∆∞ng ai r·ªìi
        c≈©ng s·∫Ω v∆∞·ª£t qua b·∫±ng c√°ch n√†y hay c√°ch kh√°c, v√† ƒë√¢y s·∫Ω l√† ƒëi·ªÅu ƒë·∫ßu ti√™n
        m√† m√¨nh c·∫ßn l√†m ƒë·ªÉ bi·∫øt m√¨nh ƒëang ·ªü ƒë√¢u, c√≥ nh·ªØng g√¨ v√† ƒë√£ th·∫•t b·∫°i nh∆∞
        th·∫ø n√†o. N√≥ c√≥ th·ªÉ coi nh∆∞ l√† m·ªôt cu·ªën nh·∫•t k√Ω v·∫≠y, v√† m√¨nh mu·ªën vi·∫øt n√≥
        ra.
      </p>
      <p>V√† ƒë√¢y l√† front-page cho n√≥.</p>
    </div>
    <div className="transform scale-75 md:scale-100 origin-top-left">
      <PhongSignature classsvg="stroke-current text-black dark:text-white" />
    </div>
    <NextLink href="/phong">
      <a>
        <div className="mt-4">
          <p className="text-black dark:text-white text-sm">
            Nguy·ªÖn H·ªØu Phong.
          </p>
          <div className="text-sm text-black dark:text-white inline-flex items-center p-2 space-x-1 -ml-2 mt-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer">
            <UserCircle classNameSync="text-black dark:text-white w-7 h-7 mr-1" />
            <p>ƒê·ªçc th√™m x√≠u n·ªØa v·ªÅ m√¨nh.</p>
          </div>
        </div>
      </a>
    </NextLink>
  </>
);

const ArchillectImageGridShow = ({ sync }) => (
  <>
    <ArchillectImageGrid data={sync} />
  </>
);

export async function getServerSideProps() {
  const res = await fetch(defaultEndpoint);
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}

export default function Home({ data }) {
  const [isShowingFullLetter, showFullLetter] = useState(false);
  const [isShowingArchillectImageGrid, showArchillectImageGrid] = useState(
    false
  );

  const [isShowingHashflagsGrid, showHashflagsGrid] = useState(false);

  const archillectarray = [data];

  const notifyArchillectOn = () => toast.success("üòÜ Xin ch√†o !!!");
  const notifyArchillectOff = () => toast("ü•≤ Goodbye !!!");

  const notifyHashflagOn = () => toast.success("üêß ƒê√£ hi·ªÉn th·ªã !!!");
  const notifyHashflagOff = () => toast("ü•≤ Goodbye !!!");

  return (
    <Container>
      <div className="flex flex-col mx-auto bg-gray-100 dark:bg-gray-900 items-start max-w-4xl my-2 md:my-10 p-5 md:p-10 rounded-xl w-full">
        <div className="flex space-x-2">
          <span className="text-3xl font-domainet md:text-5xl text-black dark:text-white">
            /
          </span>
          <h2 className="font-domainet text-3xl md:text-5xl tracking-tight mb-4 text-black dark:text-white">
            Front-Page
          </h2>
        </div>
        {isShowingFullLetter ? (
          <div>
            <FullLetter />
            <button
              type="button"
              className="flex items-center text-sm my-4 mx-auto px-4 py-2 rounded-md font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700"
              onClick={() => showFullLetter(false)}
            >
              <MailOpen classNameSync="text-red-500 w-7 h-7 mr-1" />
              <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªçc n√≥</p>
              <ChevronUp classNameSync="text-black dark:text-white w-4 h-4 ml-1" />
            </button>
          </div>
        ) : (
          <button
            type="button"
            className="flex items-center text-sm my-4 mx-auto px-4 py-2 rounded-md font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700"
            onClick={() => showFullLetter(true)}
          >
            <Mail classNameSync="text-red-500 w-7 h-7 mr-1" />
            <p>M·ªôt l√° th∆∞ t·ª´ Phong</p>
            <ChevronDown classNameSync="text-black dark:text-white w-4 h-4 ml-1" />
          </button>
        )}
      </div>
      <div className=" mx-auto bg-gray-100 dark:bg-gray-900 items-start max-w-4xl my-2 md:mb-10 md:-mt-2 p-5 md:p-10 rounded-xl w-full">
        <div className="flex space-x-2">
          <span className="text-3xl font-domainet md:text-5xl text-black dark:text-white">
            /
          </span>
          <h2 className="font-domainet text-3xl md:text-5xl tracking-tight mb-4 text-black dark:text-white">
            Inspiration
          </h2>
        </div>
        <div className="space-y-4">
          <div className="border-4 p-2">
            <div className="py-2">
              <div className="block md:flex md:justify-between">
                <div className="flex items-center space-x-2 text-black dark:text-white pb-4 ml-4">
                  <div>
                    <Archillect classNameSync="w-5 h-5" />
                  </div>
                  <p className=" text-sm">L·∫•y c·∫£m h·ª©ng t·ª´ Archillect</p>
                </div>
                <div className="text-black mb-4">
                  <div className="grid grid-cols-2 gap-2">
                    <button
                      type="button"
                      className="md:flex items-center text-sm mx-auto px-2 py-2 rounded-md font-medium bg-gray-200 md:bg-transparent text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none w-full"
                      onClick={() => {
                        showArchillectImageGrid(true);
                        notifyArchillectOn();
                      }}
                    >
                      <div className="flex justify-center">
                        <Cube classNameSync="text-black dark:text-white w-7 h-7 mr-1 mb-2 md:mb-0" />
                      </div>
                      G·ªçi Archillect
                    </button>
                    <Toaster />
                    <button
                      type="button"
                      className="md:flex items-center text-sm mx-auto px-2 py-2 rounded-md font-medium bg-gray-200 md:bg-transparent text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none w-full"
                      onClick={() => {
                        showArchillectImageGrid(false);
                        notifyArchillectOff();
                      }}
                    >
                      <div className="flex justify-center">
                        <CubeTransparent classNameSync="text-black dark:text-white w-7 h-7 mr-1 mb-2 md:mb-0" />
                      </div>
                      T·∫Øt Archillect
                    </button>
                  </div>
                </div>
              </div>
              {isShowingArchillectImageGrid ? (
                <ArchillectImageGridShow sync={archillectarray[0]} />
              ) : (
                <p className="text-gray-700 dark:text-gray-200 text-sm">
                  Archillect [archive + intellect] l√† m·ªôt AI t·ª± ƒë·ªông kh√°m ph√° -
                  t√¨m ki·∫øm - l·ª±a ch·ªçn h√¨nh ·∫£nh tr√™n Internet. T√¨m hi·ªÉu th√™m v·ªÅ
                  Archillect t·∫°i{" "}
                  <ExternalLink
                    href="https://archillect.com/"
                    colortext="text-gray-500"
                    colortexthover="hover:text-gray-700"
                  >
                    ƒë√¢y
                  </ExternalLink>
                </p>
              )}
            </div>
          </div>
          <div className="border-4 p-2">
            <div className="block md:flex md:justify-between py-2">
              <div className="flex items-center space-x-2 text-black dark:text-white pb-4 ml-4">
                <div>
                  <Twitter classNameSync="w-6 h-6" />
                </div>
                <p className=" text-sm">L·∫•y c·∫£m h·ª©ng t·ª´ Twitter Hashflags</p>
              </div>
              <div className="text-black mb-4">
                <div className="grid grid-cols-2 gap-2">
                  <button
                    type="button"
                    className="md:flex items-center text-sm mx-auto px-2 py-2 rounded-md font-medium bg-gray-200 md:bg-transparent text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none w-full"
                    onClick={() => {
                      showHashflagsGrid(true);
                      notifyHashflagOn();
                    }}
                  >
                    <div className="flex justify-center">
                      <DocumentText classNameSync="text-black dark:text-white w-7 h-7 mr-1 mb-2 md:mb-0" />
                    </div>
                    Hi·ªÉn th·ªã
                  </button>

                  <button
                    type="button"
                    className="md:flex items-center text-sm mx-auto px-2 py-2 rounded-md font-medium bg-gray-200 md:bg-transparent text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none w-full"
                    onClick={() => {
                      showHashflagsGrid(false);
                      notifyHashflagOff();
                    }}
                  >
                    <div className="flex justify-center">
                      <Document classNameSync="text-black dark:text-white w-7 h-7 mr-1 mb-2 md:mb-0" />
                    </div>
                    T·∫Øt ƒëi
                  </button>
                </div>
              </div>
            </div>
            {isShowingHashflagsGrid ? (
              <HashflagsGrid />
            ) : (
              <p className="text-gray-700 dark:text-gray-200 text-sm">
                Hashflags l√† m·ªôt kh√°i ni·ªám ƒë∆∞·ª£c Twitter s·ª≠ d·ª•ng ƒë·ªÉ ch·ªâ nh·ªØng
                icon b√™n c·∫°nh c√°c Hashtags. <br />
                Ch·ªâ nh·ªØng Hashtags th·∫≠t s·ª± quan tr·ªçng v√† ƒëang hot m·ªõi c√≥
                Hashflags.
                <br /> C√°c Hashflags ch·ªâ t·ªìn t·∫°i trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t
                ƒë·ªãnh tr∆∞·ªõc khi bi·∫øn m·∫•t.{" "}
              </p>
            )}
          </div>
        </div>
      </div>
    </Container>
  );
}
